"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var APM = function () {
	function APM(options) {
		_classCallCheck(this, APM);

		Object.assign(this, {
			accuracy: 1000,
			timeSpan: 60000,
			data: []
		}, options);

		for (var i = 0; i < this.timeSpawn; i += this.accuracy) {
			this.data[i] = {
				lastUpdate: 0,
				amount: {}
			};
		}
	}

	_createClass(APM, [{
		key: "action",
		value: function action(id) {
			var amount = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];
			var timeSpan = this.timeSpan;
			var data = this.data;
			var accuracy = this.accuracy;

			var now = Date.now();

			var index = Math.floor(now % timeSpan / (accuracy * 1000));

			var pointer = data[index];

			if (pointer.lastUpdate - now > timeSpan) {
				pointer.amount = {};
			}
			pointer.lastUpdate = now;
			if (pointer.amount[id] === undefined) pointer.amount[id] = 0;
			pointer.amount[id] += amount;
		}
	}, {
		key: "get",
		value: function get(id) {
			var data = this.data;
			var timeSpan = this.timeSpan;

			var now = Date.now();

			var result = 0;

			data.forEach(function (_ref) {
				var lastUpdate = _ref.lastUpdate;
				var amount = _ref.amount;

				if (lastUpdate - now > timeSpan) {
					if (amount[id]) result += amount;
				}
			});

			return result;
		}
	}]);

	return APM;
}();

exports.default = APM;